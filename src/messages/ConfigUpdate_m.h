//
// Generated file, do not edit! Created by nedtool 5.5 from messages/ConfigUpdate.msg.
//

#ifndef __CONFIGUPDATE_M_H
#define __CONFIGUPDATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "../common/Constants.h"
// }}

/**
 * Class generated from <tt>messages/ConfigUpdate.msg:20</tt> by nedtool.
 * <pre>
 * packet ConfigUpdate
 * {
 *     string LCName;
 *     string configs;
 * 
 *     // sourceName and destName must be set for module purge
 *     string sourceName;
 * }
 * </pre>
 */
class ConfigUpdate : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string LCName;
    ::omnetpp::opp_string configs;
    ::omnetpp::opp_string sourceName;

  private:
    void copy(const ConfigUpdate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ConfigUpdate&);

  public:
    ConfigUpdate(const char *name=nullptr, short kind=0);
    ConfigUpdate(const ConfigUpdate& other);
    virtual ~ConfigUpdate();
    ConfigUpdate& operator=(const ConfigUpdate& other);
    virtual ConfigUpdate *dup() const override {return new ConfigUpdate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getLCName() const;
    virtual void setLCName(const char * LCName);
    virtual const char * getConfigs() const;
    virtual void setConfigs(const char * configs);
    virtual const char * getSourceName() const;
    virtual void setSourceName(const char * sourceName);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ConfigUpdate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ConfigUpdate& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CONFIGUPDATE_M_H

