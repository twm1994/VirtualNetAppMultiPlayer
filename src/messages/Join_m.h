//
// Generated file, do not edit! Created by nedtool 5.5 from messages/Join.msg.
//

#ifndef __JOIN_M_H
#define __JOIN_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>messages/Join.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Join
 * {
 *     string senderName;
 *     simtime_t joinTime;
 *     simtime_t cycleLength;
 *     string LCName;
 * }
 * </pre>
 */
class Join : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string senderName;
    ::omnetpp::simtime_t joinTime;
    ::omnetpp::simtime_t cycleLength;
    ::omnetpp::opp_string LCName;

  private:
    void copy(const Join& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Join&);

  public:
    Join(const char *name=nullptr, short kind=0);
    Join(const Join& other);
    virtual ~Join();
    Join& operator=(const Join& other);
    virtual Join *dup() const override {return new Join(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSenderName() const;
    virtual void setSenderName(const char * senderName);
    virtual ::omnetpp::simtime_t getJoinTime() const;
    virtual void setJoinTime(::omnetpp::simtime_t joinTime);
    virtual ::omnetpp::simtime_t getCycleLength() const;
    virtual void setCycleLength(::omnetpp::simtime_t cycleLength);
    virtual const char * getLCName() const;
    virtual void setLCName(const char * LCName);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Join& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Join& obj) {obj.parsimUnpack(b);}


#endif // ifndef __JOIN_M_H

